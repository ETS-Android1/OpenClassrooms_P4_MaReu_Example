apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId "fr.delcey.mareu"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        // New android orchestrator allows us to clear data between each instrumentation test
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.android.material:material:1.2.0'

    // Room
    def room_version = '2.2.5'
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // Date
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'

    testImplementation 'junit:junit:4.13'
    // Helps testing livedata : InstantTaskExecutorRule, for example
    testImplementation 'android.arch.core:core-testing:1.1.1'
    // Helps mocking objects (Mockito.mock() or Mockito.spy())
    testImplementation 'org.mockito:mockito-core:3.3.3'
    // Helps asserting (lists for example)
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    // Allow use of "PickerAction" for example : https://developer.android.com/reference/androidx/test/espresso/contrib/package-summary
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'

    // Allow the line "testOptions { execution 'ANDROIDX_TEST_ORCHESTRATOR' }" to be considered
    androidTestUtil 'androidx.test:orchestrator:1.2.0'
}

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/*Lambda*.class']

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html {
                enabled = true
                destination file("${buildDir}/reports/jacoco")
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, excludes: autoGenerated))
    }
}