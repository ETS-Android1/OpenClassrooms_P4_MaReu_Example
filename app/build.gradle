apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'
    defaultConfig {
        applicationId "fr.delcey.mareu"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        unitTests.returnDefaultValues = true

        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.android.material:material:1.3.0'

    testImplementation 'junit:junit:4.13.2'
    // Helps testing livedata : InstantTaskExecutorRule, for example
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    // Helps mocking objects (Mockito.mock() or Mockito.spy())
    testImplementation 'org.mockito:mockito-core:3.10.0'
    // Helps asserting (lists for example)
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // Allow use of "PickerAction" for example : https://developer.android.com/reference/androidx/test/espresso/contrib/package-summary
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    // Base dependency for Espresso
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    androidTestUtil 'androidx.test:orchestrator:1.4.0-beta01'
}

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.class',
            '**/*Repository.class'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html {
                enabled = true
                destination file("${buildDir}/reports/jacoco")
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}